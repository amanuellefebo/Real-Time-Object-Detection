# -*- coding: utf-8 -*-
"""Computer_Vision_fin.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/154oua0hv3QzwU_we_9IWjKyI9EcSr6Wp
"""

#pip install ultralytics

#pip install streamlit

from ultralytics import YOLO

import streamlit as st

import sys

from PIL import Image

import cv2

import tempfile

from ultralytics import YOLO

# Load the model
model=YOLO('yolo11n.pt')

model = YOLO("yolo11n.pt")

model = YOLO("yolo11n-pose.pt")

model = YOLO("yolo11n-seg.pt")

# Define function for detection (using YOLO here as an example)
def detect_objects(file):
    model =YOLO('yolo11n.pt')   # Load your YOLO model
    results = model.predict(source=file)  # Predict objects in image
    for result in results:
      boxes = result.boxes  # Boxes object for bounding box outputs
      masks = result.masks  # Masks object for segmentation masks outputs
      keypoints = result.keypoints  # Keypoints object for pose outputs
      probs = result.probs  # Probs object for classification outputs
      obb = result.obb  # Oriented boxes object for OBB outputs
      result.show()  # display to screen
      result.save(filename="result.jpg")  # save to disk

# Define function for detection (using YOLO here as an example)
def segment_objects(file):
    model = YOLO("yolo11n-seg.pt")  # Load your YOLO model
    results = model.predict(source=file)  # Predict objects in image
    for result in results:
      boxes = result.boxes  # Boxes object for bounding box outputs
      masks = result.masks  # Masks object for segmentation masks outputs
      keypoints = result.keypoints  # Keypoints object for pose outputs
      probs = result.probs  # Probs object for classification outputs
      obb = result.obb  # Oriented boxes object for OBB outputs
      result.show()  # display to screen
      result.save(filename="result.jpg")  # save to disk

def detect_video_objects(uploaded_video, model_path='/content/yolo11n.pt'):
    # Save uploaded video to a temporary file
    with tempfile.NamedTemporaryFile(delete=False, suffix='.mp4') as temp_video:
        temp_video.write(uploaded_video.read())
        temp_path = temp_video.name

    # Load the YOLO model
    model = YOLO('yolo11n.pt')

    # Capture video
    cap = cv2.VideoCapture(temp_path)
    st_frame = st.empty()  # Placeholder for displaying frames

    while cap.isOpened():
        ret, frame = cap.read()
        if not ret:
            break

        # YOLOv8 Inference
        results = model(frame)

        # Plot predictions
        annotated_frame = results[0].plot()

        # Show result in Streamlit
        st_frame.image(annotated_frame, channels="BGR", use_column_width=True)

    cap.release()

def segment_video_objects(uploaded_video, model_path="/content/yolo11n-seg.pt"):


    # Save uploaded video to a temporary file
    with tempfile.NamedTemporaryFile(delete=False, suffix='.mp4') as temp_video:
        temp_video.write(uploaded_video.read())
        temp_path = temp_video.name

    # Load the YOLO model
    model = YOLO(model_path)

    # Capture video
    cap = cv2.VideoCapture(temp_path)
    st_frame = st.empty()  # Placeholder for displaying frames

    while cap.isOpened():
        ret, frame = cap.read()
        if not ret:
            break

        # YOLOv8 Inference
        results = model(frame)

        # Plot predictions
        annotated_frame = results[0].plot()

        # Show result in Streamlit
        st_frame.image(annotated_frame, channels="BGR", use_column_width=True)

    cap.release()

# 1. Choose whether to upload Image or Video
choice = st.radio("What do you want to upload?", ("Image", "Video"))

file = None

# 2: Based on the choice, upload file
if choice == "Image":
    file = st.file_uploader("Upload an Image", type=["jpg", "jpeg", "png"])
elif choice == "Video":
    file = st.file_uploader("Upload a Video", type=["mp4", "mov", "avi"])

# 3: what do you want to do?
if file:
    task = st.selectbox("Choose task", ["Segmentation", "Detection"])

    if choice == "Image":
        image = Image.open(file)
        if task == "Segmentation":
            segment_objects(image)
        else:
            detect_objects(image)

    elif choice == "Video":
        if task == "Segmentation":
            segment_video_objects(file)
        else:
            detect_video_objects(file)

